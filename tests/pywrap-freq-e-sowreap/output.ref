
    -----------------------------------------------------------------------
          Psi4: An Open-Source Ab Initio Electronic Structure Package
                               Psi4 1.1rc3.dev5 

                         Git: Rev {master} 3fbd859 


    R. M. Parrish, L. A. Burns, D. G. A. Smith, A. C. Simmonett,
    A. E. DePrince III, E. G. Hohenstein, U. Bozkaya, A. Yu. Sokolov,
    R. Di Remigio, R. M. Richard, J. F. Gonthier, A. M. James,
    H. R. McAlexander, A. Kumar, M. Saitow, X. Wang, B. P. Pritchard,
    P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,
    F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,
    J. Chem. Theory Comput. in press (2017).
    (doi: 10.1021/acs.jctc.7b00174)

    -----------------------------------------------------------------------


    Psi4 started on: Monday, 15 May 2017 03:39PM

    Process ID:  15279
    PSIDATADIR: /home/psilocaluser/gits/hrw-direct/objdir4/stage/usr/local/psi4/share/psi4
    Memory:     500.0 MiB
    Threads:    1
    
  ==> Input File <==

--------------------------------------------------------------------------
#! Finite difference of energies frequency, run in sow/reap mode.

print 'This file will not work outside a cmake test environment.'

molecule h2o {
  symmetry c1
  O
  H 1 0.9894093
  H 1 0.9894093 2 100.02688
}

set {
  basis sto-3g
  d_convergence 11
  scf_type pk
  points 3
}

frequencies('scf', dertype='energy', mode='sow')

anal_freqs = psi4.Vector(3)  #TEST
anal_freqs.set(0, 0, 2170.045)  #TEST
anal_freqs.set(0, 1, 4140.001)  #TEST
anal_freqs.set(0, 2, 4391.065)  #TEST
ref_zpve = 0.024378893351  #TEST
ref_eq_nre = 8.90648922437  #TEST
ref_eq_e = -74.9659011923  #TEST

fd_freqs = get_frequencies()  #TEST
#compare_vectors(anal_freqs, fd_freqs, 1, 'Frequencies')  #TEST
#compare_values(ref_zpve, get_variable('ZPVE'), 4, 'ZPVE')  #TEST
#compare_values(ref_eq_e, get_variable('current energy'), 6, 'SP energy')  #TEST
#compare_values(ref_eq_nre, get_active_molecule().nuclear_repulsion_energy(), 6, 'SP NRE')  #TEST
#compare_values(ref_eq_nre, h2o.nuclear_repulsion_energy(), 6, 'SP NRE')  #TEST
#compare_values(ref_eq_nre, get_variable('nuclear repulsion energy'), 6, 'SP NRE')  #TEST

#print_variables()

--------------------------------------------------------------------------
hessian() will perform frequency computation by finite difference of analytic energies.

-------------------------------------------------------------

  Using finite-differences of energies to determine vibrational frequencies and 
  normal modes.  Resulting frequencies are only valid at stationary points.
	Generating geometries for use with 3-point formula.
	Displacement size will be 5.00e-03.
	Number of atoms is 3.
	Number of irreps is 1.
	Number of SALCS is 3.
	 Number of SALC's per irrep:
	  Irrep 1: 3
	Number of geometries (including reference) is 12.
	Number of displacements per irrep:
	  Irrep 1: 12

-------------------------------------------------------------

#    The frequency sow/reap procedure has been selected through mode='sow'. In addition
#    to this output file (which contains no quantum chemical calculations), this job
#    has produced a number of input files (FREQ-*.in) for individual components
#    and a single input file (FREQ-master.in) with a frequency(mode='reap') command.
#    These files may look very peculiar since they contain processed and pickled python
#    rather than normal input. Follow the instructions below (repeated in FREQ-master.in)
#    to continue.
#
#    Alternatively, a single-job execution of the hessian may be accessed through
#    the frequency wrapper option mode='continuous'.
#

#    Follow the instructions below to carry out this frequency computation.
#
#    (1)  Run all of the FREQ-*.in input files on any variety of computer architecture.
#       The output file names must be as given below (these are the defaults when executed
#       as `psi4 FREQ-1.in`, etc.).
#
#             psi4 -i FREQ-1.in                   -o FREQ-1.out                 
#             psi4 -i FREQ-2.in                   -o FREQ-2.out                 
#             psi4 -i FREQ-3.in                   -o FREQ-3.out                 
#             psi4 -i FREQ-4.in                   -o FREQ-4.out                 
#             psi4 -i FREQ-5.in                   -o FREQ-5.out                 
#             psi4 -i FREQ-6.in                   -o FREQ-6.out                 
#             psi4 -i FREQ-7.in                   -o FREQ-7.out                 
#             psi4 -i FREQ-8.in                   -o FREQ-8.out                 
#             psi4 -i FREQ-9.in                   -o FREQ-9.out                 
#             psi4 -i FREQ-10.in                  -o FREQ-10.out                
#             psi4 -i FREQ-11.in                  -o FREQ-11.out                
#             psi4 -i FREQ-12.in                  -o FREQ-12.out                
#             psi4 -i FREQ-13.in                  -o FREQ-13.out                
#
#    (2)  Gather all the resulting output files in a directory. Place input file
#         FREQ-master.in into that directory and run it. The job will be minimal in
#         length and give summary results for the frequency computation in its output file.
#
#             psi4 -i FREQ-master.in              -o FREQ-master.out            
#


*** Psi4 exiting successfully. Buy a developer a beer!
